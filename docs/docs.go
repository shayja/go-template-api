// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Shay Jacoby",
            "url": "https://github.com/shayja/",
            "email": "shayja@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate a user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Login to your account",
                "parameters": [
                    {
                        "description": "Authentication Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.AuthenticationInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register User",
                "parameters": [
                    {
                        "description": "User Request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/request-otp": {
            "post": {
                "description": "Generate and send an OTP to a user's mobile number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Request OTP",
                "parameters": [
                    {
                        "description": "OTP Request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.OtpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/resend-otp": {
            "post": {
                "description": "Resend the OTP to a user's mobile number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Resend OTP",
                "parameters": [
                    {
                        "description": "OTP Request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.OtpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/verify-otp": {
            "post": {
                "description": "Verify the OTP and authenticate the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Verify OTP",
                "parameters": [
                    {
                        "description": "Verify OTP Request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.VerifyOtpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/order": {
            "get": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Responds with the list of user orders as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get orders (array) by the user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID (uuid)",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Add a new order",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create and store a new order in the database.",
                "parameters": [
                    {
                        "description": "Order data",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.OrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/order/{id}": {
            "get": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Responds with an entity of order as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get an order by order ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/order/{id}/status": {
            "put": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Update the status of an order",
                "tags": [
                    "Orders"
                ],
                "summary": "Update order status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/product": {
            "get": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Retrieve a paginated list of all products",
                "tags": [
                    "Products"
                ],
                "summary": "Get all products",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Add a new product to the inventory",
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "parameters": [
                    {
                        "description": "Product data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.ProductRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/product/{id}": {
            "get": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Retrieve product details by product ID",
                "tags": [
                    "Products"
                ],
                "summary": "Get a product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Update an existing product's details by ID",
                "tags": [
                    "Products"
                ],
                "summary": "Update product details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated product data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.ProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "delete": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Delete a specific product by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Delete Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/products/{id}/image": {
            "put": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Upload and update the image of a specific product by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update Product Image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Product Image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/products/{id}/price": {
            "put": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Update the price of a specific product by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update Product Price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product Price",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.ProductPriceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.AuthenticationInput": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entities.Order": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "The date and time the order was created\nexample: 2024-07-01T12:00:00Z",
                    "type": "string",
                    "minLength": 20,
                    "example": "2024-07-01T12:00:00Z"
                },
                "id": {
                    "description": "The UUID of a product\nexample: 6204037c-30e6-408b-8aaa-dd8219860b4b",
                    "type": "string",
                    "minLength": 36,
                    "example": "6204037c-30e6-408b-8aaa-dd8219860b4b"
                },
                "status": {
                    "description": "The status of the order (1=created/pending, 2=processing, 3=completed, 4=cancelled)\nexample: 2\nrequired: true",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "example": 1
                },
                "total_price": {
                    "description": "The total price of the order\nexample: 100.00\nrequired: true",
                    "type": "number",
                    "format": "float64",
                    "example": 100
                },
                "updated_at": {
                    "description": "The date and time the order was last updated\nexample: 2025-01-01T12:00:00Z",
                    "type": "string"
                },
                "user_id": {
                    "description": "The user that created the order\nexample: 451fa817-41f4-40cf-8dc2-c9f22aa98a4f\nrequired: true",
                    "type": "string",
                    "minLength": 36,
                    "example": "451fa817-41f4-40cf-8dc2-c9f22aa98a4f"
                }
            }
        },
        "entities.OrderDetail": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "The date and time the order detail was created\nexample: 2025-01-01T12:00:00Z",
                    "type": "string"
                },
                "id": {
                    "description": "The UUID of an order detail (line item)\nexample: 6204037c-30e6-408b-8aaa-dd8219860b4b",
                    "type": "string"
                },
                "order_id": {
                    "description": "The UUID of the related order.\nexample: 451fa817-41f4-40cf-8dc2-c9f22aa98a4f\nrequired: true",
                    "type": "string",
                    "minLength": 36,
                    "example": "451fa817-41f4-40cf-8dc2-c9f22aa98a4f"
                },
                "product_id": {
                    "description": "The UUID of the related product\nexample: 063d0ff7-e17e-4957-8d92-a988caeda8a1\nrequired: true",
                    "type": "string",
                    "minLength": 36,
                    "example": "063d0ff7-e17e-4957-8d92-a988caeda8a1"
                },
                "quantity": {
                    "description": "The quantity of the product\nexample: 2\nrequired: true",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "example": 1
                },
                "total_price": {
                    "description": "The date and time the order detail was created\nexample: 2024-07-01T12:00:00Z\nrequired: true",
                    "type": "number",
                    "format": "float64",
                    "example": 55
                },
                "unit_price": {
                    "description": "The unit price of the product\nexample: 50.00\nrequired: true",
                    "type": "number",
                    "format": "float64",
                    "example": 50
                },
                "updated_at": {
                    "description": "The date and time the order detail was last updated\nexample: 2025-01-01T12:00:00Z",
                    "type": "string",
                    "minLength": 20,
                    "example": "2024-07-01T12:00:00Z"
                }
            }
        },
        "entities.OrderRequest": {
            "type": "object",
            "properties": {
                "order_details": {
                    "description": "Array of the order line items.\nexample: [{\"product_id\":\"6204037c-30e6-408b-8aaa-dd8219860b4b\",\"quantity\":2,\"unit_price\":50.00}]\nrequired: true",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.OrderDetail"
                    }
                },
                "status": {
                    "description": "The status of the order (1=created/pending, 2=processing, 3=completed, 4=cancelled)\nexample: 1\nrequired: true",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "example": 1
                },
                "total_price": {
                    "description": "The total price of the order\nexample: 100.00\nrequired: true",
                    "type": "number",
                    "format": "float64",
                    "example": 100
                },
                "user_id": {
                    "description": "The user that creates the order\nexample: 451fa817-41f4-40cf-8dc2-c9f22aa98a4f\nrequired: true",
                    "type": "string",
                    "minLength": 36,
                    "example": "063d0ff7-e17e-4957-8d92-a988caeda8a1"
                }
            }
        },
        "entities.OtpRequest": {
            "type": "object",
            "properties": {
                "mobile": {
                    "type": "string"
                }
            }
        },
        "entities.ProductPriceRequest": {
            "type": "object",
            "required": [
                "price"
            ],
            "properties": {
                "price": {
                    "type": "number"
                }
            }
        },
        "entities.ProductRequest": {
            "type": "object",
            "required": [
                "description",
                "image",
                "name",
                "price",
                "sku"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "sku": {
                    "type": "string"
                }
            }
        },
        "entities.UserRequest": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "mobile",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "mobile": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entities.VerifyOtpRequest": {
            "type": "object",
            "properties": {
                "mobile": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "apiKey": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Please add it in the format \"Bearer {AccessToken}\" to authorize your requests.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Go Template API",
	Description:      "API documentation for the Go Template API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
